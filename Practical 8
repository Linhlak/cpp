#include <iostream>
#include <vector>
#include <stdexcept>
using namespace std;

class Matrix {
private:
    vector<vector<int>> data;
    int rows, cols;

public:
    // Constructor
    Matrix(int r, int c) : rows(r), cols(c), data(r, vector<int>(c)) {}

    // Function to input matrix elements
    void inputMatrix() {
        cout << "Enter elements of " << rows << "x" << cols << " matrix:" << endl;
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                cin >> data[i][j];
            }
        }
    }

    // Function to display matrix
    void displayMatrix() const {
        for (const auto &row : data) {
            for (int elem : row) {
                cout << elem << " ";
            }
            cout << endl;
        }
    }

    // Function to add two matrices
    Matrix operator+(const Matrix &other) const {
        if (rows != other.rows || cols != other.cols) {
            throw invalid_argument("Matrices must have the same dimensions for addition.");
        }
        Matrix result(rows, cols);
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                result.data[i][j] = data[i][j] + other.data[i][j];
            }
        }
        return result;
    }

    // Function to multiply two matrices
    Matrix operator*(const Matrix &other) const {
        if (cols != other.rows) {
            throw invalid_argument("Number of columns of first matrix must be equal to number of rows of second matrix.");
        }
        Matrix result(rows, other.cols);
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < other.cols; j++) {
                result.data[i][j] = 0;
                for (int k = 0; k < cols; k++) {
                    result.data[i][j] += data[i][k] * other.data[k][j];
                }
            }
        }
        return result;
    }

    // Function to transpose the matrix
    Matrix transpose() const {
        Matrix result(cols, rows);
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                result.data[j][i] = data[i][j];
            }
        }
        return result;
    }
};

int main() {
    int choice;
    do {
        cout << "\nMatrix Operations Menu:" << endl;
        cout << "1. Sum of Matrices" << endl;
        cout << "2. Product of Matrices" << endl;
        cout << "3. Transpose of a Matrix" << endl;
        cout << "4. Exit" << endl;
        cout << "Enter your choice: ";
        cin >> choice;

        try {
            if (choice == 1) {
                int r, c;
                cout << "Enter rows and columns of matrices: ";
                cin >> r >> c;
                Matrix mat1(r, c), mat2(r, c);
                mat1.inputMatrix();
                mat2.inputMatrix();
                Matrix sum = mat1 + mat2;
                cout << "Sum of Matrices:" << endl;
                sum.displayMatrix();
            } else if (choice == 2) {
                int r1, c1, r2, c2;
                cout << "Enter rows and columns of first matrix: ";
                cin >> r1 >> c1;
                cout << "Enter rows and columns of second matrix: ";
                cin >> r2 >> c2;
                Matrix mat1(r1, c1), mat2(r2, c2);
                mat1.inputMatrix();
                mat2.inputMatrix();
                Matrix product = mat1 * mat2;
                cout << "Product of Matrices:" << endl;
                product.displayMatrix();
            } else if (choice == 3) {
                int r, c;
                cout << "Enter rows and columns of matrix: ";
                cin >> r >> c;
                Matrix mat(r, c);
                mat.inputMatrix();
                Matrix transposed = mat.transpose();
                cout << "Transpose of Matrix:" << endl;
                transposed.displayMatrix();
            } else if (choice == 4) {
                cout << "Exiting..." << endl;
            } else {
                cout << "Invalid choice! Please try again." << endl;
            }
        } catch (const exception &e) {
            cout << "Error: " << e.what() << endl;
        }
    } while (choice != 4);

    return 0;
}
